@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using WasmBoids.Models
@using System.Drawing
@inject IJSRuntime _jsRuntime;

<p>
    Currently rendering through @(_renderInJs ? "JavaScript" : "Blazor's Canvas API"). Switch to the other to see
    the performance difference. (It's very noticeable above 30 boids.)
</p>
<div>
    <button id="addBoidBtn" class="btn btn-primary" @onclick="IncrementCount">Add boid</button>
    <label for="addBoidBtn">@_currentCount boids</label>
    <br><br>
    <input type="checkbox" id="showSightCheckbox" checked="@_showSight" @onchange="args => _showSight = (bool) args.Value!">
    <label for="showSightCheckbox">Show sight range?</label>
    <br>
    <!-- This is a small hack, we toggle the behaviour regardless of the given value. -->
    <input type="checkbox" id="separationRule" checked="@_behaviours.HasFlag(Models.Boid.Behaviours.Separation)"
           @onchange="_ => _behaviours ^= Models.Boid.Behaviours.Separation">
    <label for="separationRule">Separation rule</label>
    <input type="checkbox" id="alignmentRule" checked="@_behaviours.HasFlag(Models.Boid.Behaviours.Alignment)"
           @onchange="_ => _behaviours ^= Models.Boid.Behaviours.Alignment">
    <label for="alignmentRule">Alignment rule</label>
    <input type="checkbox" id="cohesiveRule" checked="@_behaviours.HasFlag(Models.Boid.Behaviours.Cohesive)"
           @onchange="_ => _behaviours ^= Models.Boid.Behaviours.Cohesive">
    <label for="cohesiveRule">Cohesive rule</label>
    <input type="checkbox" id="followMouse" checked="@_behaviours.HasFlag(Models.Boid.Behaviours.FollowMouse)"
           @onchange="_ => _behaviours ^= Models.Boid.Behaviours.FollowMouse">
    <label for="followMouse">Follow mouse</label>
    <br>
    <input type="checkbox" id="renderCheck" checked="@_renderInJs"
           @onchange="args => _renderInJs = (bool)args.Value!">
    <label for="renderCheck">Render in native JS?</label>
</div>
<div id="boidsHolder" style="position: fixed; width: 75%; height: 70%">
    @if (_renderInJs)
    {
        <canvas id="boidsCanvas"></canvas>
    }
    else
    {
        <BECanvas Width="@_canvasWidth" Height="@_canvasHeight" @ref="_canvasReference"></BECanvas>
    }
</div>

@code {

    private bool _renderInJs = false;

    private long _canvasWidth = 1280;
    private long _canvasHeight = 720;
    private BECanvas _canvasReference;
    private Canvas2DContext _context;

    private int _currentCount = 10;
    private bool _showSight = true;

    private Models.Boid.Behaviours _behaviours = Models.Boid.Behaviours.Separation
                                                 | Models.Boid.Behaviours.Alignment
                                                 | Models.Boid.Behaviours.Cohesive
                                                 | Models.Boid.Behaviours.FollowMouse;

    private Field _boidField;
    private DateTime _lastRender;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _boidField = new Field(_canvasWidth, _canvasHeight, _currentCount, 0);
        await _jsRuntime.InvokeVoidAsync("initRenderJS", DotNetObjectReference.Create(this));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    // I think `CreateCanvas2DAsync` has to be here because it may not be present yet in
    // `OnInitialized`
        if (!_renderInJs)
            _context = await _canvasReference.CreateCanvas2DAsync();
        _boidField.Resize(_canvasWidth, _canvasHeight);
    }

    private void IncrementCount()
    {
        _boidField.AddRandomBoids(1);
        _currentCount++;
    }

    [JSInvokable]
    public void MouseMoved(double x, double y)
    {
        _boidField.MousePos = (x, y);
    }

    [JSInvokable]
    public async ValueTask RenderInBlazor(long holderWidth, long holderHeight)
    {
        if (holderWidth != _canvasWidth || holderHeight != _canvasHeight)
        {
            _canvasWidth = holderWidth;
            _canvasHeight = holderHeight;
            StateHasChanged();
        }
        _boidField.StepForward(_behaviours);

        var fps = 1.0 / (DateTime.Now - _lastRender).TotalSeconds;
        _lastRender = DateTime.Now;

        if (_renderInJs)
        {
            var boidList = _boidField.Boids.Select(boid => new[] {boid.Position.X, boid.Position.Y, boid.Direction}).ToList();
            await _jsRuntime.InvokeVoidAsync("renderInJS", boidList, fps, _canvasWidth, _canvasHeight, _showSight, Models.Boid.SightRadius);
            return;
        }
        
        await _context.BeginBatchAsync();
        await _context.ClearRectAsync(0, 0, _boidField.Width, _boidField.Height);
        await _context.SetFillStyleAsync("#000FFF");
        await _context.FillRectAsync(0, 0, _boidField.Width, _boidField.Height);
        await _context.SetFontAsync("26px Segoe UI");
        await _context.SetFillStyleAsync("#FFFFFF");
        await _context.FillTextAsync("Blazor WASM & HTML Canvas", 10, 30);
        await _context.SetFontAsync("16px consolas");
        await _context.FillTextAsync($"FPS: {fps:0.0}", 10, 50);
        await _context.SetStrokeStyleAsync("#FFFFFF");
        foreach (var boid in _boidField.Boids)
        {
            await _context.SaveAsync();
            await _context.TranslateAsync(boid.Position.X, boid.Position.Y);
            await _context.RotateAsync(-(boid.Direction + MathF.PI / 2));

            if (_showSight)
            {
                await _context.ArcAsync(0, 0, Models.Boid.SightRadius, 0, 2 * Math.PI);
                await _context.SetFillStyleAsync("#FFFFFF0F");
                await _context.FillAsync();
            }

            await _context.BeginPathAsync();
            await _context.MoveToAsync(0, 0);
            await _context.LineToAsync(4, -2);
            await _context.LineToAsync(0, 10);
            await _context.LineToAsync(-4, -2);
            await _context.LineToAsync(0, 0);
            await _context.ClosePathAsync();

            await _context.SetFillStyleAsync(boid.Color);
            await _context.FillAsync();
            await _context.RestoreAsync();
        }
        await _context.EndBatchAsync();
    }

}